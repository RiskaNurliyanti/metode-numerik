import sys, os
import numpy as np
import scipy
import scipy.linalg  

os.system('color 0f')

temp = []

def clr():
   if os.name == 'posix':
      _ = os.system('clear')
   else:
      _ = os.system('cls')

def underScore():
    return "\n_______________________________________________________________________"

def printMatrix(a, n):
    for i in range(n):
        print("\t", end="")
        for j in range(n):
            print(round(a[i][j], 2), "\t", end="") #round untuk mengembalikan nilai berupa bilangan integer atau float
        print()
    print("\n")


def printMatrixResult(a, n):
    for i in range(n):
        print("\t", end="")
        for j in range(n+1):
            print(round(a[i][j], 2), "\t", end="")
            if (j == n-1):
                print("|", end=" ")
        print()
    print("\n")


def gauss(a, n):
    #Tahap eliminasi
    for i in range(n): #n adalah panjang matriks/vektor (jumlah baris)
        if a[i][i] == 0.0:
            sys.exit('Mengandung Pembagian Terhadap Nol!')

        for j in range(i+1, n): #deret baris acuan
            ratio = a[j][i] / a[i][i] #perhitungan faktor
            for k in range(n+1):  #untuk mengeleminasi tiap element yang bukan baris tetap/acuan
                a[j][k] = a[j][k] - ratio * a[i][k]
    # Subsitusi Mundur
    x[n-1] = a[n-1][n] / a[n-1][n-1] 
    for i in range(n-2,-1,-1): #untuk step mundur dihitung sampai 0
        x[i] = a[i][n]
        for j in range(i+1,n):
            x[i] = x[i] - a[i][j] * x[j] #menjumlahhkan nilai x yg sudah diketahui 
        x[i] = x[i] / a[i][i]
    return x

        

def GaussJordan(a, n):
    flag = 0
    for i in range(n):
        if (a[i][i] == 0):
            c = 1;
            while ((i + c) < n and a[i + c][i] == 0):
                c+=1;            
            if ((i + c) == n):
                flag = 1; #cek solusi persamaannya hanya 1, tidak ada atau bahkan lebih dari 1
                break
            j=i
            for k in range(n+1): #untuk mengeleminasi tiap element yang bukan baris tetap/acuan jika nilai dalam baris ada angka 1
                a[j][k], a[j+c][k] = a[j+c][k], a[j][k]
  
        for j in range(n):
              
            if (i != j) : #jika nilai nya bukan 1    
                faktor = a[j][i] / a[i][i]; #perhitungan faktor
                for k in range(n+1):        #untuk mengeleminasi tiap element yang bukan baris tetap/acuan jika nilai dalam baris ada angka 1
                    a[j][k] = a[j][k] - (a[i][k]) * faktor        
    return flag


def PrintHasil(a, n, flag):
    if (flag == 2):     
     print("    Solusi Tak Berhingga")
    elif (flag == 3):
      print("   Tidak Ada Solusi")
    else:
        print("Maka Matriks (x) :   \n")
        for i in range(n):     
            x[i] = a[i][n] / a[i][i]
            print("\t", round(x[i], 2))    
        return x 
  

def CheckConsistency(a, n, flag):      
    flag = 3
    for i in range(n-1):
        sum = 0
        for j in range(n):      
            sum = sum + a[i][j]
            if (sum == a[i][j]):
                flag = 2
    return flag


while(True):
    clr()
    
    print("                                                                                      ")
    print("                                                                                      ")
    print("       1.  Metode Eliminasi Gauss                                                     ")        # ✔
    print("                                                                                      ")      
    print("       2.  Metode Eliminasi Gauss-Jordan                                              ")        # ✔
    print("                                                                                      ")     
    print("       3.  Metode Matriks Balikan                                                     ")        # ✔
    print("                                                                                      ")      
    print("       4.  Metode Dekomposisi LU                                                      ")        # ✔
    print("                                                                                      ")      
    print("       0.  Keluar                                                                     ")      
   
    pil = input("Pilih Menu >>  ")

    
    clr()
    if (pil == '1' or pil == '2' or pil == '3' or pil == '4'):
        if pil == "1":
            print("\nMetode Eliminasi Gauss")
        elif pil == "2": 
            print("\nMetode Gauss-Jordan")
        elif pil == "3":
            print("\nMetode Matriks Balikan")
        elif pil == "4":
            print("\nMetode Dekomposisi LU")
        n = 0
        n = int(input('\n\n Matriks Berapa Variabel ?    : '))

        #np.zeros mengubah semua elemen array menjadi 0 
        A = np.zeros((n, n)) # Kembalikan array baru dengan bentuk dan tipe tertentu, diisi dengan nol
        a = np.zeros((n, n))
        invA = np.zeros((n, n))
        x = np.zeros((n))
        b = []

        #menginput matriks
        print("\n\n\nMulai Menghitung ...")
        print(underScore())
        print(f"Silahkan Masukkan Elemen Matriks A({n} x {n})")
        print("Masukkan Elemen dan pisah dengan Tab, dan Tekan Enter Untuk Baris Baru!\n\nContoh Inputan:\n")
        print(">>>\ta11\ta12\ta13\t...\ta1n")
        print(">>>\ta21\ta22\ta23\t...\ta2n ")
        print(">>>\t :\t :\t :\t :\t :")
        print(">>>\tam1\tam2\tam3\t...\tamn \n\n")
        print("Input (A): \n")
        for i in range(n):
            print(">>>\t", end="")
            addList = filter(None, input().split("\t"))
            addList = list(map(float, addList))  
            temp.append(addList)
        A = temp.copy()
        temp.clear()
        print(underScore())

        print("Silahkan Masukkan Elemen Vektor B")
        print("Masukkan Elemen dan pisah dengan Tab, dan Tekan Enter Untuk Baris Baru!\n\nContoh Inputan:\n")
        print(">>>\tb1\tb2\tb3\t...\tbn\n\n")
        print("Input (b): \n")
        print(">>>\t", end="")

        addList = filter(None, input().split("\t"))
        addList = list(map(float, addList)) 
        temp.append(addList) 
        b = temp.copy()
        temp.clear()
        print(underScore())
        
        for i in range(n):
            for j in range (n):
                a[i][j] = A[i][j]
            A[i].append(b[0][i])


# Metode gauss
# =====================================================================================================================

    if (pil == '1'):
        print("\n\n\nMatriks (A) Anda :   \n")
        printMatrix(A, n)
        print("Matriks (b) Anda :   \n")
        for i in range(n):
            print("\t", round(b[0][i], 2))

        x = gauss(A, n)
        
        print("\n\nMatriks Akhir Adalah : \n")
        printMatrixResult(A, n);
        print()

        print('\n\nMaka Matriks (x) :  \n')
        for i in range(n):
            print("\t", round(x[i], 2))          

        print('\n\nSolusi Yang Dicari Adalah :  \n\n')
        for i in range(n):
            print('x%d = %0.2f' %(i+1,round(x[i], 2)), end = '\t')
        print("\n\n\n")

        input("Tekan Enter untuk Kembali ...")


# Metode gauss-jordan
# =====================================================================================================================


    elif (pil == '2'):
        print("\n\n\nMatriks (A) Anda :   \n")
        printMatrix(A, n)
        print(" (b) Anda :   \n")
        for i in range(n):
            print("\t", b[0][i])

        flag = GaussJordan(A, n)
            
        if (flag == 1):     
            flag = CheckConsistency(A, n, flag);    

        print("\n\nMatriks Akhir Adalah : \n")
        printMatrixResult(A, n);
            
        x = PrintHasil(A, n, flag);

        print('\n\nSolusi Yang Dicari Adalah :  \n\n')
        for i in range(n):
            print('x%d = %0.2f' %(i+1,x[i]), end = '\t')
        print("\n\n\n")
        input("Tekan Enter untuk Kembali ...")

# Metode matriks-balikan
# =====================================================================================================================

    elif (pil == '3'):
        print("\n\n\nMatriks (A) Anda :   \n")
        printMatrix(A, n)
        print("Matriks (b) Anda :   \n")
        for i in range(n):
            print("\t", b[0][i])

        print("\n\nInverse Matriks A : \n")
        invA = np.linalg.inv(a) #mencari invers matriks A
        printMatrix(invA, n)

        # Kali
        invASqueeze = np.squeeze(np.asarray(invA))
        bSqueeze = np.squeeze(np.asarray(b))
        print("\nPerkalian antara Inverse Matriks A dan Matriks (B) Akan Menghasilkan Matriks (x) ..\n")
        print('\n\nMaka Matriks (x) :  \n')
        result = np.dot(invASqueeze, bSqueeze) #mengalikan dua matriks
        for i in result:
            print("\t", round(i, 2))
        print("\n\n\n")
        input("Tekan Enter untuk Kembali ...")

    

# Metode dekomposisi LU
# =====================================================================================================================

    elif (pil == '4'):
        P, L, U = scipy.linalg.lu(a)
        
        UList = U.tolist()
        LList = L.tolist()        
        

        print ("Matriks A:\n")
        printMatrix(a, n)  
        
        print("Matriks b :   \n")
        for i in range(n):
            print("\t", round(b[0][i], 2))

            
        print ("P :\n")
        printMatrix(P, n)  

        print ("Lower :\n")
        printMatrix(L, n)

        print ("Upper:\n")
        printMatrix(U, n)

        lu, piv = scipy.linalg.lu_factor(a) #Compute pivoted LU decomposition of a matrix. hitung pivot dari matriks dekomposisi LU
        x = scipy.linalg.lu_solve((lu, piv), b[0]) #Solve an equation system, a x = b, given the LU factorization. mememcahkan sistem persamaan ax = b bedasarkan faktorisasi LU

        
        print('\nMaka Matriks (x) :  \n')
        for i in range(n):
            print("\t", round(x[i], 2))    
        print("\n\n\n\n")
        input("Tekan Enter untuk Kembali ...")

        
    

# EXIT
# =====================================================================================================================
    elif (pil == '0'):
        print("\n\nTerima Kasih Telah Menggunakan Program Ini \n\n\n\n")
        break
